[
  {
    "topic": "Math Operations",
    "functions": [
      {
        "name": "Addition",
        "input": "print(1+2)",
        "output": "3"
      },
      {
        "name": "Subtraction",
        "input": "print(1-2)",
        "output": "-1"
      },
      {
        "name": "Multiplication",
        "input": "print(3*4)",
        "output": "12"
      },
      {
        "name": "Division",
        "input": "print(5/2)",
        "output": "2.5"
      },
      {
        "name": "Floor",
        "input": "print(5//2)",
        "output": "2"
      },
      {
        "name": "Modulo",
        "input": "print(5%2)",
        "output": "1"
      },
      {
        "name": "Power",
        "input": "print(pow(2,4))",
        "output": "16"
      },
      {
        "name": "Power (alt.)",
        "input": "print(2**4)",
        "output": "16"
      },
      {
        "name": "Square Root",
        "input": "print(9**(0.5))",
        "output": "3.0"
      },
      {
        "name": "Square Root (alt.)",
        "input": "import math\nprint(math.sqrt(9))",
        "output": "3.0"
      },
      {
        "name": "Absolute Value",
        "input": "print(abs(-5))",
        "output": "5"
      },
      {
        "name": "Round",
        "input": "print(round(395, -2))",
        "output": "400"
      },
      {
        "name": "",
        "input": "print(round(3.1415, 2))",
        "output": "3.14"
      },
      {
        "name": "Floor",
        "input": "import math\nprint(math.floor(5.6))",
        "output": "5"
      },
      {
        "name": "",
        "input": "import math\nprint(math.floor(-5.6))",
        "output": "-6"
      },
      {
        "name": "Ceil",
        "input": "import math\nprint(math.ceil(5.6))",
        "output": "6"
      },
      {
        "name": "",
        "input": "import math\nprint(math.ceil(-5.6))",
        "output": "-5"
      }
    ]
  },
  {
    "topic": "String Operations",
    "functions": [
      {
        "name": "Cases",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.upper())\nprint(s.lower())\nprint(s.capitalize())\nprint(s.title())\nprint(s.swapcase())",
        "output": "HELLO WORLD\nhello world\nHello world\nHello World\nhElLo WoRlD"
      },
      {
        "name": "Length",
        "input": "s = \"HeLlO wOrLd\"\nprint(len(s))",
        "output": "11"
      },
      {
        "name": "Count",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.count('L'))",
        "output": "2"
      },
      {
        "name": "Find",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.find('O'))",
        "output": "4"
      },
      {
        "name": "",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.find('O', 6, 11))",
        "output": "7"
      },
      {
        "name": "Replace / Substitute",
        "input": "s = \"HeLlO wOrLd\"\ns = s.replace('HeLlO', 'Goodbye')\nprint(s)",
        "output": "Goodbye wOrLd"
      },
      {
        "name": "Split",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.split('O'))\nprint(s.split())",
        "output": "['HeLl', ' w', 'rLd']\n['HeLlO','wOrLd']"
      },
      {
        "name": "Partition",
        "input": "s = \"HeLlO wOrLd\"\nprint(s.partition('O'))\nprint(s.partition('z'))",
        "output": "('HeLl', 'O', ' wOrLd')\n('HeLlO wOrLd', '', '')"
      },
      {
        "name": "Concatenation",
        "input": "s1 = \"Hello\"\ns2 = \"World\"\nprint(s1 + \" \" + s2)\nprint(\" \".join([s1, s2]))",
        "output": "Hello World\nHello World"
      },
      {
        "name": "Trim",
        "input": "s3 = \"    lots of spaces    \"\nprint(s3.strip())",
        "output": "lots of spaces"
      },
      {
        "name": "Loop",
        "input": "s4 = \"Print me\"\nfor letter in s:\n    print(letter)",
        "output": "P\nr\ni\nn\nt\n \nm\ne"
      },
      {
        "name": "Logical:\nString",
        "input": "s = \"hello\"\nprint(s.isalnum())\nprint(s.isalpha())",
        "output": "True\nTrue"
      },
      {
        "name": "",
        "input": "s = \"Hello123\"\nprint(s.isalnum())\nprint(s.isalpha())",
        "output": "True\nFalse"
      },
      {
        "name": "",
        "input": "s = \"Hello World\"\nprint(s.isalnum())\nprint(s.isalpha())",
        "output": "False\nFalse"
      },
      {
        "name": "",
        "input": "s = \"hello world 123!\"\nprint(s.islower())\nprint(s.isupper())",
        "output": "True\nFalse"
      },
      {
        "name": "",
        "input": "s = \"HELLO WORLD 123!\"\nprint(s.islower())\nprint(s.isupper())",
        "output": "False\nTrue"
      },
      {
        "name": "",
        "input": "s = \"HELLO world 123!\"\nprint(s.islower())\nprint(s.isupper())",
        "output": "False\nFalse"
      },
      {
        "name": "Logical:\nNumeric",
        "input": "s = \"123456\"\nprint(s.isnumeric())\nprint(s.isdigit())\nprint(s.isdecimal())",
        "output": "True\nTrue\nTrue"
      },
      {
        "name": "",
        "input": "s = \"\\u00B2\" #\\u00B2 = ² (superscript)\nprint(s.isnumeric())\nprint(s.isdigit())\nprint(s.isdecimal())",
        "output": "True\nTrue\nFalse"
      },
      {
        "name": "",
        "input": "s = \"\\u00BD\" #\\u00BD = ½ (fraction)\nprint(s.isnumeric())\nprint(s.isdigit())\nprint(s.isdecimal())",
        "output": "True\nFalse\nFalse"
      },
      {
        "name": "",
        "input": "s = \"Hello123\"\nprint(s.isnumeric())\nprint(s.isdigit())\nprint(s.isdecimal())",
        "output": "False\nFalse\nFalse"
      }
    ]
  },
  {
    "topic": "List Operations",
    "functions": [
      {
        "name": "Append",
        "input": "lst = [1, 2, 3]\nlst.append(['a', 'b', 'c'])\nprint(lst)",
        "output": "[1, 2, 3, ['a', 'b', 'c']]"
      },
      {
        "name": "Extend",
        "input": "lst = [1, 2, 3]\nlst.extend(['a', 'b', 'c'])\nprint(lst)",
        "output": "[1, 2, 3, 'a', 'b', 'c']"
      },
      {
        "name": "Insert",
        "input": "lst = ['a', 'b', 'c']\nlst.insert(2, 'd')\nprint(lst)",
        "output": "#insert element into index position in list\n['a', 'b', 'd', 'c']"
      },
      {
        "name": "Remove",
        "input": "lst = ['a', 'b', 'd', 'c']\nlst.remove('d')\nprint(lst)",
        "output": "#remove element in list\n['a', 'b', 'c']"
      },
      {
        "name": "",
        "input": "lst = ['a', 'b', 'd', 'b', 'c']\nlst.remove('b')\nprint(lst)",
        "output": "#remove first occurrence of element in list\n['a', 'd', 'b', 'c']"
      },
      {
        "name": "Pop",
        "input": "lst = ['a', 'b', 'd', 'c']\nelement=lst.pop()\nprint(element)\nprint(lst)",
        "output": "#return last element in list\nc\n['a', 'b', 'd']"
      },
      {
        "name": "",
        "input": "lst = ['a', 'b', 'd', 'c']\nelement=lst.pop(2)\nprint(element)\nprint(lst)",
        "output": "#return element at index 2\nd\n['a', 'b', 'c']"
      },
      {
        "name": "Copy",
        "input": "lst = ['a', 'b', 'd', 'c']\nnew_lst = lst.copy()\nprint(new_lst)",
        "output": "#return copy of list\n['a', 'b', 'd', 'c']"
      },
      {
        "name": "Clear",
        "input": "lst = ['a', 'b', 'd', 'c']\nlst.clear()\nprint(lst)",
        "output": "#removes everything in list\n[]"
      },
      {
        "name": "Count",
        "input": "lst = ['a', 'b', 'd', 'b', 'c']\nprint(lst.count('b'))\nprint(lst.count('e'))",
        "output": "#return frequency of element in list\n2\n0"
      },
      {
        "name": "Index",
        "input": "lst = ['a', 'b', 'd', 'b', 'c']\nprint(lst.index('b'))\nprint(lst.index('e'))",
        "output": "#return the index position of element in list\n1\nValueError: 'e' is not in list"
      },
      {
        "name": "Reverse",
        "input": "lst = [3, 6, 2, 4, 0]\nnew_lst = lst[::-1]\nprint(new_lst)",
        "output": "#return the list in reverse order\n[0, 4, 2, 6, 3]"
      },
      {
        "name": "",
        "input": "lst = [3, 6, 2, 4, 0]\nlst.reverse()\nprint(lst)",
        "output": "#return the list in reverse order\n[0, 4, 2, 6, 3]"
      },
      {
        "name": "Sort",
        "input": "lst = [3, 6, 2, 4, 0]\nlst.sort()\nprint(lst)",
        "output": "#sort list in place\n[0, 2, 3, 4, 6]"
      },
      {
        "name": "",
        "input": "lst = [5, 10, 3, -3, 0]\nnew_lst = sorted(lst)\nprint(new_lst)",
        "output": "#return sorted list as variable new_lst\n[-3, 0, 3, 5, 10]"
      },
      {
        "name": "Sort (Descending)",
        "input": "lst = [3, 6, 2, 4, 0]\nlst.sort(reverse=True)\nprint(lst)",
        "output": "#sort list in place\n[6, 4, 3, 2, 0]"
      },
      {
        "name": "",
        "input": "lst = [5, 10, 3, -3, 0]\nnew_lst = sorted(lst, reverse=True)\nprint(new_lst)",
        "output": "#return sorted list as variable new_lst\n[10, 5, 3, 0, -3]"
      },
      {
        "name": "Min",
        "input": "lst = [5, 10, 3, -3, 0]\nprint(min(lst))",
        "output": "#return min element in list\n-3"
      },
      {
        "name": "Max",
        "input": "lst = [5, 10, 3, -3, 0]\nprint(max(lst))",
        "output": "#return max element in list\n10"
      },
      {
        "name": "Logical",
        "input": "lst = ['a', 'b', 'c', 'd', 'e']\nprint('c' in lst)\nprint('x' in lst)",
        "output": "#is an element in the list\nTrue\nFalse"
      },
      {
        "name": "",
        "input": "lst = ['a', 'b', 'c', 'd', 'e']\nprint('c' not in lst)\nprint('x' not in lst)",
        "output": "#is an element NOT in the list\nFalse\nTrue"
      },
      {
        "name": "Zip",
        "input": "lst1 = [0, 1, 2, 3, 4]\nlst2 = ['a', 'b', 'c', 'd', 'e']\nprint(list(zip(lst1, lst2)))",
        "output": "[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e')]"
      },
      {
        "name": "Enumerate",
        "input": "for item in enumerate('abcde'):\n    print(item)",
        "output": "(0, 'a')\n(1, 'b')\n(2, 'c')\n(3, 'd')\n(4, 'e')"
      },
      {
        "name": "",
        "input": "for idx, item in enumerate('abcde'):\n    print(idx, item)",
        "output": "0 a\n1 b\n2 c\n3 d\n4 e"
      },
      {
        "name": "List Comprehension",
        "input": "lst = [x for x in range(11) if x % 2 == 0]\nprint(lst)",
        "output": "[0, 2, 4, 6, 8, 10]"
      },
      {
        "name": "",
        "input": "celsius = [0, 15, 23.6, 34.5]\nfahrenheit = [((9/5)*temp + 32) for temp in celsius]\nprint(fahrenheit)",
        "output": "[32.0, 59.0, 74.48, 94.1]"
      }
    ]
  },
  {
    "topic": "Dictionary Operations",
    "functions": [
      {
        "name": "Access",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nprint(d.keys())\nprint(d.values())\nprint(d.items())",
        "output": "dict_keys(['city', 'country'])\ndict_values(['Madrid', 'Spain'])\ndict_items([('city', 'Madrid'), ('country', 'Spain')])"
      },
      {
        "name": "",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nprint(d['city'])\nprint(d.get('country'))",
        "output": "Madrid\nSpain"
      },
      {
        "name": "Add",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nd['code'] = 'ESP'\nprint(d)",
        "output": "{'city': 'Madrid', 'country': 'Spain', 'code': 'ESP'}"
      },
      {
        "name": "Edit",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nd['city'] = 'Barcelona'\nprint(d)",
        "output": "{'city': 'Barcelona', 'country': 'Spain'}"
      },
      {
        "name": "Pop",
        "input": "d = {'city': 'Madrid', 'country': 'Spain', 'code': 'ESP'}\nprint(d.pop('country'))\nprint(d)",
        "output": "Spain\n{'city': 'Madrid', 'code': 'ESP'}"
      },
      {
        "name": "Popitem",
        "input": "d = {'city': 'Madrid', 'country': 'Spain', 'code': 'ESP'}\nprint(d.popitem())\nprint(d)",
        "output": "('code', 'ESP')\n{'city': 'Madrid', 'country': 'Spain'}"
      },
      {
        "name": "Copy",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nnew_dict = d.copy()\nprint(new_dict)",
        "output": "#return copy of dictionary\n{'city': 'Madrid', 'country': 'Spain'}"
      },
      {
        "name": "Clear",
        "input": "d = {'city': 'Madrid', 'country': 'Spain'}\nd.clear()\nprint(d)",
        "output": "#removes everything in dictionary\n{}"
      },
      {
        "name": "Loop",
        "input": "d = {'city': 'Madrid', 'country': 'Spain', 'code': 'ESP'}\nfor key, val in d.items():\n    print(key + \": \" + val)",
        "output": "city: Madrid\ncountry: Spain\ncode: ESP"
      }
    ]
  },
  {
    "topic": "Tuple Operations",
    "functions": [
      {
        "name": "Index",
        "input": "tup = ('a', 'b', 'd', 'b', 'c')\nprint(tup.index('b'))\nprint(tup.index('e'))",
        "output": "1\nValueError: tuple.index(x): x not in tuple"
      },
      {
        "name": "Count",
        "input": "tup = ('a', 'b', 'd', 'b', 'c')\nprint(tup.count('b'))\nprint(tup.count('e'))",
        "output": "2\n0"
      },
      {
        "name": "Loop",
        "input": "tup = ('a', 'b', 'd', 'b', 'c')\nfor t in tup:\n    print(t)",
        "output": "a\nb\nd\nb\nc"
      }
    ]
  },
  {
    "topic": "Set Operations",
    "functions": [
      {
        "name": "Initialize",
        "input": "x = set([1, 3, 5, 7])\nprint(x)",
        "output": "{1, 3, 5, 7}"
      },
      {
        "name": "Add",
        "input": "x = {1, 3, 5, 7}\nx.add(9)\nprint(x)\nx.add(3)\nprint(x)",
        "output": "#insert an element to set\n{1, 3, 5, 7, 9}\n{1, 3, 5, 7, 9}"
      },
      {
        "name": "Discard",
        "input": "x = {1, 3, 5, 7}\nx.discard(3)\nprint(x)\nx.discard(2)\nprint(x)",
        "output": "#no error if element does not exist\n{1, 5, 7}\n{1, 5, 7}"
      },
      {
        "name": "Remove",
        "input": "x = {1, 3, 5, 7}\nx.remove(3)\nprint(x)\nx.remove(2)\nprint(x)",
        "output": "#error if element does not exist\n{1, 5, 7}\nKeyError: 2"
      },
      {
        "name": "Copy",
        "input": "x = {1, 3, 5, 7}\nodds = x.copy()\nprint(odds)",
        "output": "#return copy of set\n{1, 3, 5, 7}"
      },
      {
        "name": "Clear",
        "input": "x = {1, 3, 5, 7}\nx.clear()\nprint(x)",
        "output": "#removes everything in set\nset()"
      },
      {
        "name": "Union",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nprint(set1.union(set2))",
        "output": "#return all elements of both sets\n{1, 2, 4, 5}"
      },
      {
        "name": "Difference",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nprint(set1.difference(set2))",
        "output": "#return elements only found in set1\n{5}"
      },
      {
        "name": "Intersection",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nprint(set1.intersection(set2))",
        "output": "#return elements found in both sets\n{1, 2}"
      },
      {
        "name": "Symmetric Difference",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nprint(set1.symmetric_difference(set2))",
        "output": "#return elements not in both sets\n{4, 5}"
      },
      {
        "name": "Update",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nset1.update(set2)\nprint(set1)\nprint(set2)",
        "output": "#replaces set1 with all elements of both sets\n{1, 2, 4, 5}\n{1, 2, 4}"
      },
      {
        "name": "Difference Update",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nset1.difference_update(set2)\nprint(set1)\nprint(set2)",
        "output": "#replaces set1 with elements found only in set1\n{5}\n{1, 2, 4}"
      },
      {
        "name": "Intersection Update",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nset1.intersection_update(set2)\nprint(set1)\nprint(set2)",
        "output": "#replaces set1 with elements found in both sets\n{1, 2}\n{1, 2, 4}"
      },
      {
        "name": "Symmetric Difference Update",
        "input": "set1 = {1, 2, 5}\nset2 = {1, 2, 4}\nset1.symmetric_difference_update(set2)\nprint(set1)\nprint(set2)",
        "output": "#replaces set1 with elements not found in both sets\n{4, 5}\n{1, 2, 4}"
      },
      {
        "name": "Is Disjoint",
        "input": "set1 = {1, 2}\nset2 = {1, 2, 4}\nset3 = {5}\nprint(set1.isdisjoint(set2))\nprint(set1.isdisjoint(set3))",
        "output": "#return True if null intersections\nFalse\nTrue"
      },
      {
        "name": "Is Subset",
        "input": "set1 = {1, 2}\nset2 = {1, 2, 4}\nprint(set1.issubset(set2))\nprint(set2.issubset(set1))",
        "output": "#return True if set1 in set2\nTrue\nFalse"
      },
      {
        "name": "Is Superset",
        "input": "set1 = {1, 2}\nset2 = {1, 2, 4}\nprint(set1.issuperset(set2))\nprint(set2.issuperset(set1))",
        "output": "#return True if set1 contains all elements in set2\nFalse\nTrue"
      }
    ]
  }
]